// geoFire is a helper library for location-based operations in Firebase.
// It provides functions to store data for location querying in Firebase,
// and perform location queries such as location updates and localized searches.
// geoFire stores the location coordinates of a data point as a geohash
// (http://en.wikipedia.org/wiki/Geohash) in Firebase.

var GeoFire = (function() {

function log(e){GEOFIRE_DEBUG&&console.log(e)}var GEOFIRE_DEBUG=!0;console.log("Note: debug set to "+GEOFIRE_DEBUG);var validateKey=function(e){return new RSVP.Promise(function(t,i){var n;"string"!=typeof e&&(n="key must be a string"),void 0!==n?i("Invalid key '"+e+"': "+n):t()})},validateLocation=function(e){return new RSVP.Promise(function(t,i){var n;if(null===e&&t(),e instanceof Array&&2===e.length){var o=e[0],r=e[1];"number"!=typeof o||-90>o||o>90?n="latitude must be a number within the range [-90, 90]":("number"!=typeof r||-180>r||r>180)&&(n="longitude must be a number within the range [-180, 180]")}else n="expected 2 values, got "+e.length;void 0!==n?i("Invalid location ["+e+"]: "+n):t()})},updateFirebaseIndex=function(e,t,i){return log("updateFirebaseIndex() called"),new RSVP.Promise(function(n,o){null===i&&n(),e.child("indices/"+encodeGeohash(i,12)).set(t,function(e){e?o("Firebase synchronization failed: "+e):(log("write to /indices/"),n())})})},updateFirebaseLocation=function(e,t,i,n){log("updateFirebaseLocation() called");var o=function(){return new RSVP.Promise(function(i,o){void 0!==n[t]?e.child("indices/"+encodeGeohash(n[t].split(",").map(Number),12)).remove(function(e){e?o("Firebase synchronization failed: "+e):(log("removal of /indices/"),i())}):i()}.bind(this))},r=function(){return new RSVP.Promise(function(n,o){e.child("locations/"+t).set(i?i.toString():null,function(e){e?o("Firebase synchronization failed: "+e):(log("write to /locations/"),n())})})};return o().then(function(){return r()})},GeoCallbackRegistration=function(e){if("function"!=typeof e)throw new Error("GeoCallbackRegistration.cancel() callback must be a function.");this._cancelCallback=e};GeoCallbackRegistration.prototype.cancel=function(){this._cancelCallback(),delete this._cancelCallback};var GeoQuery=function(e,t){this._saveQueryCriteria(t),this._firebaseRef=e,this._callbacks={onKeyMoved:[],onKeyEntered:[],onKeyLeft:[]},this._locationsInQuery={},this._allLocations={},this._firebaseRef.child("indices").on("child_added",function(e){var t=e.val();this._firebaseRef.child("locations/"+t).once("value",function(e){var i=e.val().split(",").map(Number);this._allLocations[t]=i,this._fireCallbacks(t,i)}.bind(this))}.bind(this)),this._firebaseRef.child("locations").on("child_removed",function(e){var t=e.name();void 0!==this._locationsInQuery[t]&&(this._callbacks.onKeyLeft.forEach(function(e){e(t,this._allLocations[t])}.bind(this)),delete this._allLocations[t])}.bind(this))};GeoQuery.prototype._fireCallbacks=function(e,t){var i=void 0!==this._locationsInQuery[e],n=dist(t,this._center)<=this._radius;!i&&n?(log(e+" entered GeoQuery"),this._callbacks.onKeyEntered.forEach(function(i){i(e,t)}),this._locationsInQuery[e]=t):i&&!n?(log(e+" left GeoQuery"),this._callbacks.onKeyLeft.forEach(function(i){i(e,t)}),delete this._locationsInQuery[e]):i&&(log(e+" moved within GeoQuery"),this._callbacks.onKeyMoved.forEach(function(i){i(e,t)}),this._locationsInQuery[e]=t)},GeoQuery.prototype.getResults=function(){return new RSVP.Promise(function(e){var t=[];for(var i in this._locationsInQuery)this._locationsInQuery.hasOwnProperty(i)&&t.push([i,this._locationsInQuery[i]]);e(t)}.bind(this))},GeoQuery.prototype.onKeyEntered=function(e){if("function"!=typeof e)throw new Error("onKeyEntered() callback must be a function.");this._callbacks.onKeyEntered.push(e);for(var t in this._locationsInQuery)this._locationsInQuery.hasOwnProperty(t)&&e(t,this._locationsInQuery[t]);return new GeoCallbackRegistration(function(){this._callbacks.onKeyEntered.splice(this._callbacks.onKeyEntered.indexOf(e),1)}.bind(this))},GeoQuery.prototype.onKeyLeft=function(e){if("function"!=typeof e)throw new Error("onKeyLeft() callback must be a function.");return this._callbacks.onKeyLeft.push(e),new GeoCallbackRegistration(function(){this._callbacks.onKeyLeft.splice(this._callbacks.onKeyLeft.indexOf(e),1)}.bind(this))},GeoQuery.prototype.onKeyMoved=function(e){if("function"!=typeof e)throw new Error("onKeyMoved() callback must be a function.");return this._callbacks.onKeyMoved.push(e),new GeoCallbackRegistration(function(){this._callbacks.onKeyMoved.splice(this._callbacks.onKeyMoved.indexOf(e),1)}.bind(this))},GeoQuery.prototype.cancel=function(){this._callbacks={onKeyMoved:[],onKeyEntered:[],onKeyLeft:[]},this._firebaseRef.child("indices").off(),this._firebaseRef.child("locations").off()},GeoQuery.prototype.updateQueryCriteria=function(e){this._saveQueryCriteria(e);for(var t in this._allLocations)this._allLocations.hasOwnProperty(t)&&this._fireCallbacks(t,this._allLocations[t])},GeoQuery.prototype._saveQueryCriteria=function(e){if(void 0===e.type)throw new Error('No "type" attribute specified for query criteria.');if("circle"!==e.type&&"square"!==e.type)throw new Error('Invalid "type" attribute specified for query criteria. Valid types are "circle" and "square".');if(void 0===e.center)throw new Error('No "center" attribute specified for query criteria.');if(!(e.center instanceof Array&&2===e.center.length))throw new Error('Invalid "center" attribute specified for query criteria. Expected array of length 2, got '+e._center.length);var t=e.center[0],i=e.center[1];if("number"!=typeof t||-90>t||t>90)throw new Error('Invalid "center" attribute specified for query criteria. Latitude must be a number within the range [-90, 90]');if("number"!=typeof i||-180>i||i>180)throw new Error('Invalid "center" attribute specified for query criteria. Longitude must be a number within the range [-180, 180]');if(void 0===e.radius)throw new Error('No "radius" attribute specified for query criteria.');if("number"!=typeof e.radius||e.radius<0)throw new Error('Invalid "radius" attribute specified for query criteria. Radius must be a number greater than or equal to 0.');this._type=e.type,this._center=e.center,this._centerHash=encodeGeohash(e.center,12),this._radius=e.radius};var GeoFire=function(e){this._firebaseRef=e,this._allLocations={},this._firebaseRef.child("locations").on("child_added",function(e){this._allLocations[e.name()]=e.val()}.bind(this)),this._firebaseRef.child("locations").on("child_removed",function(e){delete this._allLocations[e.name()]}.bind(this))};GeoFire.prototype.set=function(e,t){return log("set("+e+", ["+t+"]) called"),RSVP.all([validateKey(e),validateLocation(t)]).then(function(){return updateFirebaseLocation(this._firebaseRef,e,t,this._allLocations)}.bind(this)).then(function(){return updateFirebaseIndex(this._firebaseRef,e,t)}.bind(this))},GeoFire.prototype.get=function(e){return log("get("+e+") called"),validateKey(e).then(function(){return new RSVP.Promise(function(t,i){this._firebaseRef.child("locations/"+e).once("value",function(e){t(e.val()?e.val().split(",").map(Number):null)},function(e){i(e)})}.bind(this))}.bind(this))},GeoFire.prototype.remove=function(e){return this.set(e,null)},GeoFire.prototype.query=function(e){return new GeoQuery(this._firebaseRef,e)};
var encodeGeohash,decodeGeohash,dist;!function(){function n(n,a,i){var t=(n.min+n.max)/2;a&i?n.min=t:n.max=t}function a(n){return n*Math.PI/180}var i=[16,8,4,2,1],t="0123456789bcdefghjkmnpqrstuvwxyz";dist=function(n,i){var t,e,m=n[0],h=n[1],r=i[0],o=i[1],s=6371,d=a(r-m),c=a(o-h);return t=Math.sin(d/2)*Math.sin(d/2)+Math.cos(a(m))*Math.cos(a(r))*Math.sin(c/2)*Math.sin(c/2),e=2*Math.atan2(Math.sqrt(t),Math.sqrt(1-t)),s*e},encodeGeohash=function(n,a){var i,e,m,h={min:-90,max:90},r={min:-180,max:180},o=n[0],s=n[1],d="",c=0,f=0,x=1;if(a=Math.min(a||12,22),o<h.min||o>h.max)throw"Invalid latitude specified! ("+o+")";if(s<r.min||s>r.max)throw"Invalid longitude specified! ("+s+")";for(;d.length<a;)i=x?s:o,e=x?r:h,m=(e.min+e.max)/2,i>m?(c=(c<<1)+1,e.min=m):(c=(c<<1)+0,e.max=m),x=!x,4>f?f++:(f=0,d+=t[c].toString(),c=0);return d},decodeGeohash=function(a){for(var e,m,h,r,o,s={min:-90,max:90},d={min:-180,max:180},c=1,f=0;f<a.length;f++){h=t.indexOf(a[f]);for(var x=0;5>x;x++)o=c?d:s,r=i[x],n(o,h,r),c=!c}return e=(s.min+s.max)/2,m=(d.min+d.max)/2,[e,m]}}();
return GeoFire;
})();

//Make sure this works in node.
if (typeof module !== "undefined") {
  module.exports = GeoFire;
}
